# @cchng


# function for computing whether point x
# is between point a and b in 1-dimensional space.
is.between <- function(x,a,b){
  if(x>=a & x<=b)return(TRUE)
  return(FALSE)
}

# vectorized function for computing whether two intervals overlap 
is.overlap <- Vectorize(function(startA,endA,startB,endB){
  if(endA<=startB|startA>=endB){ # not overlapping
    return(FALSE)}
  return(TRUE)
})

# function for computing whether two intervals
# reciprocally overlap each other
mutual.overlap <- Vectorize(function(startA,endA,startB,endB,perc.overlap){
  if(endA<=startB|startA>=endB){ # not overlapping
    return(FALSE)		 
  
  }else if(is.between(startB,startA,endA)&is.between(endB,startA,endA)){ # if B nested in A
      return(TRUE)
    
  }else if(is.between(startA,startB,endB)&is.between(endA,startB,endB)){ # if A nested in B
       return(TRUE)
     
  }else if(is.between(startB,startA,endA)){
    ioverlap <- (endA-startB)/(endA-startA)
    roverlap <- (endA-startB)/(endB-startB)
    #roverlap <- (endB-startA)/(endB-startB)
    if(ioverlap>=0.9&roverlap>=perc.overlap) { # mutual overlap
      #print(paste("90% overlap A",as.character(ioverlap),as.character(roverlap)))
      return(TRUE) # 90% overlap
    }
    return(FALSE)
  }else if(is.between(startA,startB,endB)){
    ioverlap <- (endB-startA)/(endA-startA)
    roverlap <- (endB-startA)/(endB-startB)
    #roverlap <- (endB-startA)/(endB-startB)
    if(ioverlap>=0.9&roverlap>=perc.overlap) { # mutual overlap
      #print(paste("90% overlap B",as.character(ioverlap),as.character(roverlap)))
      return(TRUE) # 90% overlap
    }
    return(FALSE)
  }
  gc()
  return(FALSE)
})


# function for running mutual overlap on a dataset.
# returns results in matrix format.
createCompilationMatrix <- function(acrd){
  acrdcnvs <- paste(acrd$chr,acrd$Start,acrd$End,sep=",")
  mat <- outer(acrdcnvs,acrdcnvs,FUN=mutual.overlap)
  return(mat)
}

#system.time(cnvmat <- createCompilationMatrix())
#save(cnvmat,file="asd_cnv_compilation_matrix.RData")
## load("asd_cnv_compilation_matrix.RData")
## overlap <- rowSums(cnvmat)



## cnvsets <- apply(cnvmat,1, function(x){return(paste(which(x),collapse="|"))})
## collapsed.start <- aggregate(acrd[,"Start"],
##                              by=list(factor(cnvsets), factor(acrd$chr),
##                                factor(acrd$Gain.Loss), factor(acrd$CNV.transmission)),min)
## collapsed.end <- aggregate(acrd[,"End"],
##                            by=list(factor(cnvsets), factor(acrd$chr),
##                              factor(acrd$Gain.Loss), factor(acrd$CNV.transmission)),max)
## all(collapsed.start$Group.1==collapsed.end$Group.1)
## all(collapsed.start$Group.2==collapsed.end$Group.2)
## cnv.regions <- cbind(collapsed.start,collapsed.end$x)
## names(cnv.regions) <- c("CNV.region","chr","Gain.Loss","Transmission","Start","End")

args <- commandArgs(trailingOnly=TRUE)
print(args)


#cnv.regions <- read.table("03112013_cnv_compilation.txt",sep="\t",header=TRUE)
#cnv.regions <- cnv.regions[order(cnv.regions$chr),]




annotateCommonRare <- function(chromosome){
  require(reshape)
  cat("Annotating CNVs from chromosome ",chromosome," ...")
  dgv <- read.table("/home/cchng/Documents/data/CNV/DGV/variation.hg18.v10.nov.2010.txt",
                  header=TRUE,sep="\t")
  dgv$Chr <- gsub("chr","",dgv$Chr)
  cnvchr <- cnv.regions[which(cnv.regions$chr==chromosome),]
  dgvchr <- dgv[which(dgv$Chr==chromosome),]
  rm("dgv")
  all(unique(dgvchr$Chr)==unique(cnvchr$chr))
  dgvmat <- expand.grid.df(cnvchr[,c("Start","End")],dgvchr[,c("Start","End")])

  for(perc in c(0.9,0.8,0.7,0.001)){

    system.time(dgvmat$Overlap <-mutual.overlap(as.numeric(dgvmat[,1]),
                                                as.numeric(dgvmat[,2]),
                                                as.numeric(dgvmat[,3]),
                                                as.numeric(dgvmat[,4]),perc))
    common.freq <- aggregate(dgvmat$Overlap,by=list(dgvmat[,1],dgvmat[,2]),sum)
    # trace back
    for(i in 1:nrow(common.freq)){
      cnvchr[which(cnvchr$Start %in% common.freq[i,1] &
                   cnvchr$End %in% common.freq[i,2]),
             paste(as.character(perc*100),"%",sep="")] <- common.freq[i,3]
    }
  }  
  save(cnvchr,file=paste("/home/cchng/Documents/data/CNV/CNV_by_chr/cnvchr",chromosome,".RData",sep=""))
 }


#system.time(annotateCommonRare(args[1]))



## for(i in c(1:22,"X")){
##   print(i)
##   acrdchr <- acrd[which(acrd$chr==i),]
##   acrdchr$Sample.ID <- as.integer(factor(acrdchr$Sample.ID))
##   acrdout <- cbind(ID=c(1:nrow(acrdchr)),acrdchr)
##   names(acrdout) <- c("ID","Chromosome","Start","End","Sample","Type","Extra")
##   write.csv(acrdout,file=paste("/home/cchng/Documents/data/CNV/CNV_by_chr/chr",i,"-HDCNV.csv",sep=""),quote=FALSE,row.names=FALSE)
## }
  ## chrA <- str_split(A,",")[[1]][1]
  ## startA <- as.numeric(str_split(A,",")[[1]][2])
  ## endA <- as.numeric(str_split(A,",")[[1]][3])
  ## chrB <- str_split(B,",")[[1]][1]
  ## startB <- as.numeric(str_split(B,",")[[1]][2])
  ## endB <- as.numeric(str_split(B,",")[[1]][3])
  ## if(chrA!=chrB){ # different chromosomes
  ##   return(FALSE)
  ## }else
